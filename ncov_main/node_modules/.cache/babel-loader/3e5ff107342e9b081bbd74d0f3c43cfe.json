{"remainingRequest":"/Users/uu/Desktop/ncov_before/node_modules/babel-loader/lib/index.js!/Users/uu/Desktop/ncov_before/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/uu/Desktop/ncov_before/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/uu/Desktop/ncov_before/src/views/dddemo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/uu/Desktop/ncov_before/src/views/dddemo.vue","mtime":1593512179458},{"path":"/Users/uu/Desktop/ncov_before/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/uu/Desktop/ncov_before/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/uu/Desktop/ncov_before/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/uu/Desktop/ncov_before/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7Ci8vCi8vCi8vCi8vCi8vCmltcG9ydCBlY2hhcnRzIGZyb20gImVjaGFydHMiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMKCmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CmltcG9ydCBoYWxsb3dlZW4gZnJvbSAnLi4vYXNzZXRzL2pzL3B1cnBsZS1wYXNzaW9uJzsgLy9pbXBvcnQgJy4uLy4uL25vZGVfbW9kdWxlcy9lY2hhcnRzL21hcC9qcy9jaGluYS5qcycgLy8g5byV5YWl5Lit5Zu95Zyw5Zu+5pWw5o2uCgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogImVjaGFydHMiLAogIHByb3BzOiBbInVzZXJKc29uIl0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGNoYXJ0OiBudWxsLAogICAgICBsaXN0ZGF0YTogW10KICAgIH07CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdGhpcy5jaGluYUNvbmZpZ3VyZSgpOwogIH0sCiAgYmVmb3JlRGVzdHJveTogZnVuY3Rpb24gYmVmb3JlRGVzdHJveSgpIHsKICAgIGlmICghdGhpcy5jaGFydCkgewogICAgICByZXR1cm47CiAgICB9CgogICAgdGhpcy5jaGFydC5kaXNwb3NlKCk7CiAgICB0aGlzLmNoYXJ0ID0gbnVsbDsKICB9LAogIG1ldGhvZHM6IHsKICAgIGNoaW5hQ29uZmlndXJlOiBmdW5jdGlvbiBjaGluYUNvbmZpZ3VyZSgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBpbnN0YW5jZSA9IGF4aW9zLmNyZWF0ZSh7CiAgICAgICAgaGVhZGVyczogewogICAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnCiAgICAgICAgfQogICAgICB9KTsKICAgICAgaW5zdGFuY2UucG9zdCgnaHR0cDovL2xvY2FsaG9zdDo4MDgwL2FsbERhdGVDb25maXJtZWRBcGknIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZgogICAgICApLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UuZGF0YSk7CiAgICAgICAgdmFyIGRhdGFrID0gcmVzcG9uc2UuZGF0YTsKICAgICAgICB2YXIgbGVuID0gcmVzcG9uc2UuZGF0YS5sZW5ndGg7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZgoKICAgICAgICB2YXIgbGlzdGRhdGEgPSBbXTsgLy8gICAgICBjb25zb2xlLmxvZyh0aGlzLmxpc3RkYXRhKTsKCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykgewogICAgICAgICAgdmFyIGluZm8gPSB7fTsKICAgICAgICAgIGluZm8ubmFtZSA9IGRhdGFrW2ldLm5hbWU7CiAgICAgICAgICBpbmZvLnR5cGUgPSAnbGluZSc7CiAgICAgICAgICBpbmZvLmFyZWFTdHlsZSA9IHt9OwogICAgICAgICAgaW5mby5kYXRhID0gZGF0YWtbaV0uZGF0YTsKICAgICAgICAgIGxpc3RkYXRhLnB1c2goaW5mbyk7IC8v5oqKaW5mb+mHjOmdoueahOaVsOaNrui/veWKoOWIsGRhdGHph4wKICAgICAgICB9CgogICAgICAgIGNvbnNvbGUubG9nKGxpc3RkYXRhKTsKICAgICAgICB2YXIgbXlDaGFydCA9IGVjaGFydHMuaW5pdChfdGhpcy4kcmVmcy5teUVjaGFydCwgJ3B1cnBsZS1wYXNzaW9uJyk7IC8v6L+Z6YeM5piv5Li65LqG6I635b6X5a655Zmo5omA5Zyo5L2N572uCgogICAgICAgIHdpbmRvdy5vbnJlc2l6ZSA9IG15Q2hhcnQucmVzaXplOwogICAgICAgIG15Q2hhcnQuc2V0T3B0aW9uKHsKICAgICAgICAgIC8vICAgICAgIGJhY2tncm91bmRDb2xvcjogJyMzMzMzMzMnLAogICAgICAgICAgdGl0bGU6IHsKICAgICAgICAgICAgdGV4dDogJ+eWq+aDheaDheWGtScsCiAgICAgICAgICAgIHg6ICdjZW50ZXInCiAgICAgICAgICB9LAogICAgICAgICAgZ3JpZDogewogICAgICAgICAgICBib3R0b206IDUwCiAgICAgICAgICB9LAogICAgICAgICAgdG9vbHRpcDogewogICAgICAgICAgICB0cmlnZ2VyOiAnYXhpcycsCiAgICAgICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogMC4yLAogICAgICAgICAgICBheGlzUG9pbnRlcjogewogICAgICAgICAgICAgIHR5cGU6ICdjcm9zcycsCiAgICAgICAgICAgICAgbGFiZWw6IHsvLyAgIGJhY2tncm91bmRDb2xvcjogJyM2YTc5ODUnCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgbGVnZW5kOiB7CiAgICAgICAgICAgIGRhdGE6IFsn6Iux5Zu9JywgJ+WNsOW6picsICfkv4TnvZfmlq8nLCAn5be06KW/JywgJ+e+juWbvSddLAogICAgICAgICAgICBsZWZ0OiAwCiAgICAgICAgICB9LAogICAgICAgICAgdG9vbGJveDogewogICAgICAgICAgICBmZWF0dXJlOiB7CiAgICAgICAgICAgICAgc2F2ZUFzSW1hZ2U6IHt9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB4QXhpczogW3sKICAgICAgICAgICAgdHlwZTogJ2NhdGVnb3J5JywKICAgICAgICAgICAgYm91bmRhcnlHYXA6IGZhbHNlLAogICAgICAgICAgICBkYXRhOiBbJzIwMjAtMDMtMTUnLCAnMjAyMC0wNC0xNScsICcyMDIwLTA1LTE1JywgJzIwMjAtMDYtMTUnLCAnMjAyMC0wNi0yOSddCiAgICAgICAgICB9XSwKICAgICAgICAgIHlBeGlzOiBbewogICAgICAgICAgICB0eXBlOiAndmFsdWUnCiAgICAgICAgICB9XSwKICAgICAgICAgIHNlcmllczogbGlzdGRhdGEKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["dddemo.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"echarts\">\n        <div :style=\"{height:'500px',width:'800px'}\" ref=\"myEchart\"></div>\n    </div>\n</template>\n<script>\n    import echarts from \"echarts\";\n    // eslint-disable-next-line no-unused-vars\n    import axios from 'axios';\n    import halloween from '../assets/js/purple-passion';\n    //import '../../node_modules/echarts/map/js/china.js' // 引入中国地图数据\n    export default {\n        name: \"echarts\",\n        props: [\"userJson\"],\n        data() {\n            return {\n                chart: null,\n                listdata: []\n            };\n        },\n        mounted() {\n            this.chinaConfigure();\n        },\n        beforeDestroy() {\n            if (!this.chart) {\n                return;\n            }\n            this.chart.dispose();\n            this.chart = null;\n        },\n        methods: {\n            chinaConfigure() {\n                var instance = axios.create({ headers: {'content-type': 'application/x-www-form-urlencoded'} });\n                instance.post('http://localhost:8080/allDateConfirmedApi'\n                    // eslint-disable-next-line no-undef\n                ).then(response => {\n                    console.log(response.data);\n                    var datak = response.data;\n                    var len = response.data.length;\n                    // eslint-disable-next-line no-undef\n                    var listdata=[];\n              //      console.log(this.listdata);\n                    for(var i=0;i<len;i++){\n                        var info={};\n                        info.name=datak[i].name;\n                        info.type='line';\n                        info.areaStyle={};\n                        info.data=datak[i].data;\n                        listdata.push(info);\t//把info里面的数据追加到data里\n                    }\n                    console.log(listdata);\n                    let myChart = echarts.init(this.$refs.myEchart,'purple-passion'); //这里是为了获得容器所在位置\n                    window.onresize = myChart.resize;\n                    myChart.setOption({\n                 //       backgroundColor: '#333333',\n                        title: {\n                            text: '疫情情况',\n                            x: 'center'\n                        },\n                        grid: {\n                            bottom: 50\n                        },\n                        tooltip: {\n                            trigger: 'axis',\n                            transitionDuration: 0.2,\n                            axisPointer: {\n                                type: 'cross',\n                                label: {\n                                 //   backgroundColor: '#6a7985'\n                                }\n                            }\n                        },\n                        legend: {\n                            data: ['英国', '印度', '俄罗斯', '巴西', '美国'],\n                            left: 0\n                        },\n                        toolbox: {\n                            feature: {\n                                saveAsImage: {}\n                            }\n                        },\n                        xAxis: [\n                            {\n                                type: 'category',\n                                boundaryGap: false,\n                                data: ['2020-03-15', '2020-04-15', '2020-05-15', '2020-06-15', '2020-06-29']\n                            }\n                        ],\n                        yAxis: [\n                            {\n                                type: 'value'\n                            }\n                        ],\n                        series: listdata\n                    });\n                });\n            }\n        }\n    }\n</script>\n"],"sourceRoot":"src/views"}]}