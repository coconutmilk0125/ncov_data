{"remainingRequest":"/Users/uu/Desktop/ncov_main/node_modules/babel-loader/lib/index.js!/Users/uu/Desktop/ncov_main/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/uu/Desktop/ncov_main/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/uu/Desktop/ncov_main/src/components/increasedLine/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/uu/Desktop/ncov_main/src/components/increasedLine/index.vue","mtime":1594130566421},{"path":"/Users/uu/Desktop/ncov_main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/uu/Desktop/ncov_main/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/uu/Desktop/ncov_main/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/uu/Desktop/ncov_main/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IGVjaGFydHMgZnJvbSAiZWNoYXJ0cyI7CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CmltcG9ydCBoYWxsb3dlZW4gZnJvbSAnLi4vLi4vYXNzZXRzL2pzL3B1cnBsZS1wYXNzaW9uJzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJpbmNyZWFzZWRMaW5lIiwKICBwcm9wczogWyJ1c2VySnNvbiJdLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBjaGFydDogbnVsbCwKICAgICAgY291bnRyeTogW10sCiAgICAgIGRhdGU6IFtdLAogICAgICBpbmNyZWFzZWQxOiBbXSwKICAgICAgaW5jcmVhc2VkMjogW10sCiAgICAgIGluY3JlYXNlZDM6IFtdLAogICAgICBpbmNyZWFzZWQ0OiBbXQogICAgfTsKICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB0aGlzLmNoaW5hQ29uZmlndXJlKCk7CiAgfSwKICBiZWZvcmVEZXN0cm95OiBmdW5jdGlvbiBiZWZvcmVEZXN0cm95KCkgewogICAgaWYgKCF0aGlzLmNoYXJ0KSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICB0aGlzLmNoYXJ0LmRpc3Bvc2UoKTsKICAgIHRoaXMuY2hhcnQgPSBudWxsOwogIH0sCiAgbWV0aG9kczogewogICAgY2hpbmFDb25maWd1cmU6IGZ1bmN0aW9uIGNoaW5hQ29uZmlndXJlKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIGluc3RhbmNlID0gYXhpb3MuY3JlYXRlKHsKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcKICAgICAgICB9CiAgICAgIH0pOwogICAgICBpbnN0YW5jZS5wb3N0KCdodHRwOi8vbG9jYWxob3N0OjgwODAvYXBpL2NvbmZpcm1lZEluY3JlYXNlZCcgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmCiAgICAgICkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTsKICAgICAgICB2YXIgZGF0YWsgPSByZXNwb25zZS5kYXRhOwogICAgICAgIHZhciBsZW4gPSByZXNwb25zZS5kYXRhLmxlbmd0aDsKICAgICAgICB2YXIgY291bnRyeSA9IFtdOwogICAgICAgIHZhciBkYXRlID0gZGF0YWtbMF0uZGF0ZTsKICAgICAgICB2YXIgaW5jcmVhc2VkMSA9IGRhdGFrWzBdLmluY3JlYXNlZDsKICAgICAgICB2YXIgaW5jcmVhc2VkMiA9IGRhdGFrWzFdLmluY3JlYXNlZDsKICAgICAgICB2YXIgaW5jcmVhc2VkMyA9IGRhdGFrWzJdLmluY3JlYXNlZDsKICAgICAgICB2YXIgaW5jcmVhc2VkNCA9IGRhdGFrWzNdLmluY3JlYXNlZDsKCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykgewogICAgICAgICAgY291bnRyeS5wdXNoKGRhdGFrW2ldLmNvdW50cnkpOwogICAgICAgIH0KCiAgICAgICAgdmFyIG15Q2hhcnQgPSBlY2hhcnRzLmluaXQoX3RoaXMuJHJlZnMubXlFY2hhcnQsICdwdXJwbGUtcGFzc2lvbicpOyAvL+i/memHjOaYr+S4uuS6huiOt+W+l+WuueWZqOaJgOWcqOS9jee9rgoKICAgICAgICB3aW5kb3cub25yZXNpemUgPSBteUNoYXJ0LnJlc2l6ZTsKICAgICAgICBteUNoYXJ0LnNldE9wdGlvbih7CiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDExNiwxMTYsMTMwLDEpJywKICAgICAgICAgIHRvb2x0aXA6IHsKICAgICAgICAgICAgdHJpZ2dlcjogJ2F4aXMnLAogICAgICAgICAgICBheGlzUG9pbnRlcjogewogICAgICAgICAgICAgIHR5cGU6ICdzaGFkb3cnCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBncmlkOiB7CiAgICAgICAgICAgIGxlZnQ6IDgwLAogICAgICAgICAgICBib3R0b206IDUwCiAgICAgICAgICB9LAogICAgICAgICAgeEF4aXM6IHsKICAgICAgICAgICAgdHlwZTogJ2NhdGVnb3J5JywKICAgICAgICAgICAgZGF0YTogZGF0ZQogICAgICAgICAgfSwKICAgICAgICAgIHlBeGlzOiB7CiAgICAgICAgICAgIHR5cGU6ICd2YWx1ZScKICAgICAgICAgIH0sCiAgICAgICAgICBzZXJpZXM6IFt7CiAgICAgICAgICAgIG5hbWU6ICfnvo7lm70nLAogICAgICAgICAgICB0eXBlOiAnbGluZScsCiAgICAgICAgICAgIGRhdGE6IGluY3JlYXNlZDEKICAgICAgICAgIH0sIHsKICAgICAgICAgICAgbmFtZTogJ+W3tOilvycsCiAgICAgICAgICAgIHR5cGU6ICdsaW5lJywKICAgICAgICAgICAgZGF0YTogaW5jcmVhc2VkMgogICAgICAgICAgfSwgewogICAgICAgICAgICBuYW1lOiAn5L+E572X5pavJywKICAgICAgICAgICAgdHlwZTogJ2xpbmUnLAogICAgICAgICAgICBkYXRhOiBpbmNyZWFzZWQzCiAgICAgICAgICB9LCB7CiAgICAgICAgICAgIG5hbWU6ICfoi7Hlm70nLAogICAgICAgICAgICB0eXBlOiAnbGluZScsCiAgICAgICAgICAgIGRhdGE6IGluY3JlYXNlZDQKICAgICAgICAgIH1dCiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0KfTs="},{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"wrap-container sn-container\">\n    <div class=\"sn-content\" style=\"background-color: rgba(116,116,130,1)\">\n      <div class=\"sn-title\" style=\"color: #ffffff\">重点国家每日新增确诊</div>\n      <div class=\"sn-body\">\n        <div class=\"wrap-container\">\n          <div class=\"chartsdom\" ref=\"myEchart\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n  import echarts from \"echarts\";\n  import axios from 'axios';\n  import halloween from '../../assets/js/purple-passion';\n  export default {\n    name: \"increasedLine\",\n    props: [\"userJson\"],\n    data() {\n      return {\n        chart: null,\n        country: [],\n        date: [],\n        increased1:[],\n        increased2:[],\n        increased3:[],\n        increased4:[]\n      };\n    },\n    mounted() {\n      this.chinaConfigure();\n    },\n    beforeDestroy() {\n      if (!this.chart) {\n        return;\n      }\n      this.chart.dispose();\n      this.chart = null;\n    },\n    methods: {\n      chinaConfigure() {\n        var instance = axios.create({ headers: {'content-type': 'application/x-www-form-urlencoded'} });\n        instance.post('http://localhost:8080/api/confirmedIncreased'\n                // eslint-disable-next-line no-undef\n        ).then(response => {\n          console.log(response.data);\n          var datak = response.data;\n          var len = response.data.length;\n          var country=[];\n          var date=datak[0].date;\n          var increased1=datak[0].increased;\n          var increased2=datak[1].increased;\n          var increased3=datak[2].increased;\n          var increased4=datak[3].increased;\n          for(var i=0;i<len;i++){\n            country.push(datak[i].country);\n          }\n          let myChart = echarts.init(this.$refs.myEchart,'purple-passion'); //这里是为了获得容器所在位置\n          window.onresize = myChart.resize;\n          myChart.setOption({\n            backgroundColor: 'rgba(116,116,130,1)',\n            tooltip: {\n              trigger: 'axis',\n              axisPointer: {\n                type: 'shadow'\n              }\n            },\n            grid: {\n              left: 80,\n              bottom: 50\n            },\n            xAxis: {\n              type: 'category',\n              data:date\n            },\n            yAxis: {\n              type: 'value'\n            },\n            series: [\n              {\n                name: '美国',\n                type: 'line',\n                data: increased1\n              },\n              {\n                name: '巴西',\n                type: 'line',\n                data: increased2\n              },\n              {\n                name: '俄罗斯',\n                type: 'line',\n                data: increased3\n              },\n              {\n                name: '英国',\n                type: 'line',\n                data: increased4\n              }\n            ]\n          });\n        });\n      }\n    }\n  };\n</script>\n\n<style lang=\"scss\" scoped>\n  .sn-container {\n    left: 1320px;\n    top: 640px;\n    width: 550px;\n    height: 400px;\n    background-color: rgba(91,92,110,1);\n    .chartsdom {\n      width: 100%;\n      height: 100%;\n    }\n  }\n</style>\n"],"sourceRoot":"src/components/increasedLine"}]}