{"remainingRequest":"/Users/uu/Desktop/ncov_before/node_modules/babel-loader/lib/index.js!/Users/uu/Desktop/ncov_before/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/uu/Desktop/ncov_before/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/uu/Desktop/ncov_before/src/components/worldClouder/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/uu/Desktop/ncov_before/src/components/worldClouder/index.vue","mtime":1594131643974},{"path":"/Users/uu/Desktop/ncov_before/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/uu/Desktop/ncov_before/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/uu/Desktop/ncov_before/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/uu/Desktop/ncov_before/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgJy4uLy4uL2Fzc2V0cy9qcy9lY2hhcnRzLXdvcmRjbG91ZC5taW4nOwppbXBvcnQgeyBnZXRXb3JsZENsb3VkcyB9IGZyb20gJy4uLy4uL25ldHdvcmsvbmV3cyc7CmltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAid29yZENsb3VkZXIiLAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICB0aW1lcjogbnVsbCwKICAgICAgbGlzdGRhdGE6IFtdCiAgICB9OwogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgZ2V0V29ybGRDbG91ZHMoKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgY29uc29sZS5sb2cocmVzKTsKICAgICAgX3RoaXMubGlzdERhdGEgPSByZXMuZGF0YTsKICAgIH0pOwogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgIHRoaXMuZ2V0RWNoYXJ0UmlnaHQxKCk7CiAgICB0aGlzLnRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICBfdGhpczIuZ2V0RWNoYXJ0UmlnaHQxKCk7CiAgICB9LCA1MDAwKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGdldEVjaGFydFJpZ2h0MTogZnVuY3Rpb24gZ2V0RWNoYXJ0UmlnaHQxKCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIHZhciBpbnN0YW5jZSA9IGF4aW9zLmNyZWF0ZSh7CiAgICAgICAgaGVhZGVyczogewogICAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnCiAgICAgICAgfQogICAgICB9KTsKICAgICAgaW5zdGFuY2UucG9zdCgnaHR0cDovL2xvY2FsaG9zdDo4MDgwL2FwaS93b3JsZENsb3VkcycgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmCiAgICAgICkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTsKICAgICAgICB2YXIgZGF0YWsgPSByZXNwb25zZS5kYXRhOwogICAgICAgIHZhciBsZW4gPSByZXNwb25zZS5kYXRhLmxlbmd0aDsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmCgogICAgICAgIHZhciBsaXN0ZGF0YSA9IFtdOyAvLyAgICAgIGNvbnNvbGUubG9nKHRoaXMubGlzdGRhdGEpOwoKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgICB2YXIgaW5mbyA9IHt9OwogICAgICAgICAgaW5mby5uYW1lID0gZGF0YWtbaV0ubmFtZTsKICAgICAgICAgIGluZm8udmFsdWUgPSBkYXRha1tpXS52YWx1ZTsKICAgICAgICAgIGxpc3RkYXRhLnB1c2goaW5mbyk7IC8v5oqKaW5mb+mHjOmdoueahOaVsOaNrui/veWKoOWIsGRhdGHph4wKICAgICAgICB9CgogICAgICAgIGNvbnNvbGUubG9nKGxpc3RkYXRhKTsKICAgICAgICB2YXIgbXlDaGFydCA9IGVjaGFydHMuaW5pdChfdGhpczMuJHJlZnMubXlFY2hhcnQpOwogICAgICAgIHZhciBvcHRpb24gPSB7CiAgICAgICAgICAvLyB0b29sdGlwOiB7CiAgICAgICAgICAvLyAgIHNob3c6IGZhbHNlCiAgICAgICAgICAvLyB9LAogICAgICAgICAgc2VyaWVzOiBbewogICAgICAgICAgICB0eXBlOiAnd29yZENsb3VkJywKICAgICAgICAgICAgZ3JpZFNpemU6IDEsCiAgICAgICAgICAgIHNpemVSYW5nZTogWzEyLCA1MF0sCiAgICAgICAgICAgIHJvdGF0aW9uUmFuZ2U6IFstOTAsIDkwXSwKICAgICAgICAgICAgcm90YXRpb25TdGVwOiA0NSwKICAgICAgICAgICAgc2hhcGU6ICdkaWFtb25kJywKICAgICAgICAgICAgd2lkdGg6ICc5MCUnLAogICAgICAgICAgICB0ZXh0UGFkZGluZzogMCwKICAgICAgICAgICAgYXV0b1NpemU6IHsKICAgICAgICAgICAgICBlbmFibGU6IHRydWUsCiAgICAgICAgICAgICAgbWluU2l6ZTogNgogICAgICAgICAgICB9LAogICAgICAgICAgICB0ZXh0U3R5bGU6IHsKICAgICAgICAgICAgICBub3JtYWw6IHsKICAgICAgICAgICAgICAgIHRleHRCb3JkZXJDb2xvcjogJ3JnYmEoMjU1LDI1NSwyNTUsMSknLAogICAgICAgICAgICAgICAgdGV4dEJvcmRlcldpZHRoOiAxLjUsCiAgICAgICAgICAgICAgICBjb2xvcjogZnVuY3Rpb24gY29sb3IoKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiAncmdiKCcgKyBbTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTYwKSwgTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTYwKSwgTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMTYwKSwgMV0uam9pbignLCcpICsgJyknOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZW1waGFzaXM6IHsKICAgICAgICAgICAgICAgIGZvbnRTaXplOiAyMCAvLyBzaGFkb3dCbHVyOiAxMCwKICAgICAgICAgICAgICAgIC8vIHNoYWRvd0NvbG9yOiAncmdiYSgyNTUsMjU1LDI1NSwgLjEpJwoKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRhdGE6IGxpc3RkYXRhCiAgICAgICAgICB9XQogICAgICAgIH07CiAgICAgICAgbXlDaGFydC5zZXRPcHRpb24ob3B0aW9uLCB0cnVlKTsKICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgbXlDaGFydC5yZXNpemUoKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwKICBiZWZvcmVEZXN0cm95OiBmdW5jdGlvbiBiZWZvcmVEZXN0cm95KCkgewogICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVyKTsKICB9Cn07"},{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["\n<template>\n    <div class=\"wrap-container sn-container\">\n        <div class=\"sn-content\" style=\"background-color: rgba(116,116,130,1)\">\n            <div class=\"sn-title\" style=\"color: #ffffff\">疫情关键字</div>\n            <div class=\"sn-body\">\n                <div class=\"wrap-container\">\n                    <div class=\"chartsdom\" ref=\"myEchart\"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n    import '../../assets/js/echarts-wordcloud.min'\n    import {getWorldClouds} from '../../network/news'\n    import axios from \"axios\";\n\n    export default {\n        name: \"wordClouder\",\n        data() {\n            return {\n                timer: null,\n                listdata:[]\n            }\n        },\n        created() {\n            getWorldClouds().then(res => {\n                console.log(res)\n                this.listData = res.data\n            })\n        },\n        mounted() {\n            this.getEchartRight1();\n            this.timer = setInterval(() => {\n                this.getEchartRight1();\n            }, 5000)\n        },\n        methods: {\n            getEchartRight1() {\n                var instance = axios.create({ headers: {'content-type': 'application/x-www-form-urlencoded'} });\n                instance.post('http://localhost:8080/api/worldClouds'\n                    // eslint-disable-next-line no-undef\n                ).then(response => {\n                    console.log(response.data);\n                    var datak = response.data;\n                    var len = response.data.length;\n                    // eslint-disable-next-line no-undef\n                    var listdata = [];\n                    //      console.log(this.listdata);\n                    for (var i = 0; i < len; i++) {\n                        var info = {};\n                        info.name = datak[i].name;\n                        info.value = datak[i].value;\n                        listdata.push(info);\t//把info里面的数据追加到data里\n                    }\n                    console.log(listdata);\n                    let myChart = echarts.init(this.$refs.myEchart);\n                    let option = {\n                        // tooltip: {\n                        //   show: false\n                        // },\n                        series: [{\n                            type: 'wordCloud',\n                            gridSize: 1,\n                            sizeRange: [12, 50],\n                            rotationRange: [-90, 90],\n                            rotationStep: 45,\n                            shape: 'diamond',\n                            width: '90%',\n                            textPadding: 0,\n                            autoSize: {\n                                enable: true,\n                                minSize: 6\n                            },\n                            textStyle: {\n                                normal: {\n                                    textBorderColor: 'rgba(255,255,255,1)',\n                                    textBorderWidth: 1.5,\n                                    color: () => {\n                                        return 'rgb(' + [\n                                            Math.round(Math.random() * 160),\n                                            Math.round(Math.random() * 160),\n                                            Math.round(Math.random() * 160),1\n                                        ].join(',') + ')';\n                                    }\n                                },\n                                emphasis: {\n                                    fontSize: 20,\n                                    // shadowBlur: 10,\n                                    // shadowColor: 'rgba(255,255,255, .1)'\n                                }\n                            },\n                            data: listdata\n                        }]\n                    }\n                    myChart.setOption(option, true);\n                    window.addEventListener('resize', () => {\n                        myChart.resize();\n                    });\n                });\n            },\n        },\n        beforeDestroy() {\n            clearInterval(this.timer);\n        }\n    };\n</script>\n\n<style lang=\"scss\" scoped>\n    .sn-container {\n        left: 1370px;\n        top: 325px;\n        width: 500px;\n        height: 285px;\n        background-color: rgba(91,92,110,1);\n        .chartsdom {\n            width: 100%;\n            height: 100%;\n        }\n    }\n</style>\n"],"sourceRoot":"src/components/worldClouder"}]}