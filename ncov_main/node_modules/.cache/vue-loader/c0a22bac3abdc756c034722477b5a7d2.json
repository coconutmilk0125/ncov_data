{"remainingRequest":"/Users/uu/Desktop/vueDataV-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/uu/Desktop/vueDataV-master/src/views/dddemo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/uu/Desktop/vueDataV-master/src/views/dddemo.vue","mtime":1593512179458},{"path":"/Users/uu/Desktop/vueDataV-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/uu/Desktop/vueDataV-master/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/uu/Desktop/vueDataV-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/uu/Desktop/vueDataV-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KCmltcG9ydCBlY2hhcnRzIGZyb20gImVjaGFydHMiOwovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMKaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKaW1wb3J0IGhhbGxvd2VlbiBmcm9tICcuLi9hc3NldHMvanMvcHVycGxlLXBhc3Npb24nOwovL2ltcG9ydCAnLi4vLi4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbWFwL2pzL2NoaW5hLmpzJyAvLyDlvJXlhaXkuK3lm73lnLDlm77mlbDmja4KZXhwb3J0IGRlZmF1bHQgewogICAgbmFtZTogImVjaGFydHMiLAogICAgcHJvcHM6IFsidXNlckpzb24iXSwKICAgIGRhdGEoKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgY2hhcnQ6IG51bGwsCiAgICAgICAgICAgIGxpc3RkYXRhOiBbXQogICAgICAgIH07CiAgICB9LAogICAgbW91bnRlZCgpIHsKICAgICAgICB0aGlzLmNoaW5hQ29uZmlndXJlKCk7CiAgICB9LAogICAgYmVmb3JlRGVzdHJveSgpIHsKICAgICAgICBpZiAoIXRoaXMuY2hhcnQpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICB0aGlzLmNoYXJ0LmRpc3Bvc2UoKTsKICAgICAgICB0aGlzLmNoYXJ0ID0gbnVsbDsKICAgIH0sCiAgICBtZXRob2RzOiB7CiAgICAgICAgY2hpbmFDb25maWd1cmUoKSB7CiAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGF4aW9zLmNyZWF0ZSh7IGhlYWRlcnM6IHsnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCd9IH0pOwogICAgICAgICAgICBpbnN0YW5jZS5wb3N0KCdodHRwOi8vbG9jYWxob3N0OjgwODAvYWxsRGF0ZUNvbmZpcm1lZEFwaScKICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZgogICAgICAgICAgICApLnRoZW4ocmVzcG9uc2UgPT4gewogICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UuZGF0YSk7CiAgICAgICAgICAgICAgICB2YXIgZGF0YWsgPSByZXNwb25zZS5kYXRhOwogICAgICAgICAgICAgICAgdmFyIGxlbiA9IHJlc3BvbnNlLmRhdGEubGVuZ3RoOwogICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmCiAgICAgICAgICAgICAgICB2YXIgbGlzdGRhdGE9W107CiAgICAgICAgICAvLyAgICAgIGNvbnNvbGUubG9nKHRoaXMubGlzdGRhdGEpOwogICAgICAgICAgICAgICAgZm9yKHZhciBpPTA7aTxsZW47aSsrKXsKICAgICAgICAgICAgICAgICAgICB2YXIgaW5mbz17fTsKICAgICAgICAgICAgICAgICAgICBpbmZvLm5hbWU9ZGF0YWtbaV0ubmFtZTsKICAgICAgICAgICAgICAgICAgICBpbmZvLnR5cGU9J2xpbmUnOwogICAgICAgICAgICAgICAgICAgIGluZm8uYXJlYVN0eWxlPXt9OwogICAgICAgICAgICAgICAgICAgIGluZm8uZGF0YT1kYXRha1tpXS5kYXRhOwogICAgICAgICAgICAgICAgICAgIGxpc3RkYXRhLnB1c2goaW5mbyk7CS8v5oqKaW5mb+mHjOmdoueahOaVsOaNrui/veWKoOWIsGRhdGHph4wKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGxpc3RkYXRhKTsKICAgICAgICAgICAgICAgIGxldCBteUNoYXJ0ID0gZWNoYXJ0cy5pbml0KHRoaXMuJHJlZnMubXlFY2hhcnQsJ3B1cnBsZS1wYXNzaW9uJyk7IC8v6L+Z6YeM5piv5Li65LqG6I635b6X5a655Zmo5omA5Zyo5L2N572uCiAgICAgICAgICAgICAgICB3aW5kb3cub25yZXNpemUgPSBteUNoYXJ0LnJlc2l6ZTsKICAgICAgICAgICAgICAgIG15Q2hhcnQuc2V0T3B0aW9uKHsKICAgICAgICAgICAgIC8vICAgICAgIGJhY2tncm91bmRDb2xvcjogJyMzMzMzMzMnLAogICAgICAgICAgICAgICAgICAgIHRpdGxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICfnlqvmg4Xmg4XlhrUnLAogICAgICAgICAgICAgICAgICAgICAgICB4OiAnY2VudGVyJwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZ3JpZDogewogICAgICAgICAgICAgICAgICAgICAgICBib3R0b206IDUwCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB0b29sdGlwOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXI6ICdheGlzJywKICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiAwLjIsCiAgICAgICAgICAgICAgICAgICAgICAgIGF4aXNQb2ludGVyOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY3Jvc3MnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGJhY2tncm91bmRDb2xvcjogJyM2YTc5ODUnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGxlZ2VuZDogewogICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBbJ+iLseWbvScsICfljbDluqYnLCAn5L+E572X5pavJywgJ+W3tOilvycsICfnvo7lm70nXSwKICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogMAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgdG9vbGJveDogewogICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlQXNJbWFnZToge30KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgeEF4aXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2NhdGVnb3J5JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdW5kYXJ5R2FwOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IFsnMjAyMC0wMy0xNScsICcyMDIwLTA0LTE1JywgJzIwMjAtMDUtMTUnLCAnMjAyMC0wNi0xNScsICcyMDIwLTA2LTI5J10KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgeUF4aXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3ZhbHVlJwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBzZXJpZXM6IGxpc3RkYXRhCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgfQp9Cg=="},{"version":3,"sources":["dddemo.vue"],"names":[],"mappings":";;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"dddemo.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div class=\"echarts\">\n        <div :style=\"{height:'500px',width:'800px'}\" ref=\"myEchart\"></div>\n    </div>\n</template>\n<script>\n    import echarts from \"echarts\";\n    // eslint-disable-next-line no-unused-vars\n    import axios from 'axios';\n    import halloween from '../assets/js/purple-passion';\n    //import '../../node_modules/echarts/map/js/china.js' // 引入中国地图数据\n    export default {\n        name: \"echarts\",\n        props: [\"userJson\"],\n        data() {\n            return {\n                chart: null,\n                listdata: []\n            };\n        },\n        mounted() {\n            this.chinaConfigure();\n        },\n        beforeDestroy() {\n            if (!this.chart) {\n                return;\n            }\n            this.chart.dispose();\n            this.chart = null;\n        },\n        methods: {\n            chinaConfigure() {\n                var instance = axios.create({ headers: {'content-type': 'application/x-www-form-urlencoded'} });\n                instance.post('http://localhost:8080/allDateConfirmedApi'\n                    // eslint-disable-next-line no-undef\n                ).then(response => {\n                    console.log(response.data);\n                    var datak = response.data;\n                    var len = response.data.length;\n                    // eslint-disable-next-line no-undef\n                    var listdata=[];\n              //      console.log(this.listdata);\n                    for(var i=0;i<len;i++){\n                        var info={};\n                        info.name=datak[i].name;\n                        info.type='line';\n                        info.areaStyle={};\n                        info.data=datak[i].data;\n                        listdata.push(info);\t//把info里面的数据追加到data里\n                    }\n                    console.log(listdata);\n                    let myChart = echarts.init(this.$refs.myEchart,'purple-passion'); //这里是为了获得容器所在位置\n                    window.onresize = myChart.resize;\n                    myChart.setOption({\n                 //       backgroundColor: '#333333',\n                        title: {\n                            text: '疫情情况',\n                            x: 'center'\n                        },\n                        grid: {\n                            bottom: 50\n                        },\n                        tooltip: {\n                            trigger: 'axis',\n                            transitionDuration: 0.2,\n                            axisPointer: {\n                                type: 'cross',\n                                label: {\n                                 //   backgroundColor: '#6a7985'\n                                }\n                            }\n                        },\n                        legend: {\n                            data: ['英国', '印度', '俄罗斯', '巴西', '美国'],\n                            left: 0\n                        },\n                        toolbox: {\n                            feature: {\n                                saveAsImage: {}\n                            }\n                        },\n                        xAxis: [\n                            {\n                                type: 'category',\n                                boundaryGap: false,\n                                data: ['2020-03-15', '2020-04-15', '2020-05-15', '2020-06-15', '2020-06-29']\n                            }\n                        ],\n                        yAxis: [\n                            {\n                                type: 'value'\n                            }\n                        ],\n                        series: listdata\n                    });\n                });\n            }\n        }\n    }\n</script>\n"]}]}