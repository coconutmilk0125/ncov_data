{"remainingRequest":"/Users/uu/Desktop/ncov_before/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/uu/Desktop/ncov_before/src/views/ddemo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/uu/Desktop/ncov_before/src/views/ddemo.vue","mtime":1593568544402},{"path":"/Users/uu/Desktop/ncov_before/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/uu/Desktop/ncov_before/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/uu/Desktop/ncov_before/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/uu/Desktop/ncov_before/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBlY2hhcnRzIGZyb20gImVjaGFydHMiOwovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMKaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKaW1wb3J0ICcuLi8uLi9ub2RlX21vZHVsZXMvZWNoYXJ0cy9tYXAvanMvd29ybGQuanMnOwppbXBvcnQgaGFsbG93ZWVuIGZyb20gJy4uL2Fzc2V0cy9qcy9oYWxsb3dlZW4nOwovL2ltcG9ydCAnLi4vLi4vbm9kZV9tb2R1bGVzL2VjaGFydHMvbWFwL2pzL2NoaW5hLmpzJyAvLyDlvJXlhaXkuK3lm73lnLDlm77mlbDmja4KZXhwb3J0IGRlZmF1bHQgewogICAgbmFtZTogImVjaGFydHMiLAogICAgcHJvcHM6IFsidXNlckpzb24iXSwKICAgIGRhdGEoKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgY2hhcnQ6IG51bGwsCiAgICAgICAgICAgIGxpc3RkYXRhOiBbXQogICAgICAgIH07CiAgICB9LAogICAgbW91bnRlZCgpIHsKICAgICAgICB0aGlzLmNoaW5hQ29uZmlndXJlKCk7CiAgICB9LAogICAgYmVmb3JlRGVzdHJveSgpIHsKICAgICAgICBpZiAoIXRoaXMuY2hhcnQpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICB0aGlzLmNoYXJ0LmRpc3Bvc2UoKTsKICAgICAgICB0aGlzLmNoYXJ0ID0gbnVsbDsKICAgIH0sCiAgICBtZXRob2RzOiB7CiAgICAgICAgY2hpbmFDb25maWd1cmUoKSB7CiAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGF4aW9zLmNyZWF0ZSh7IGhlYWRlcnM6IHsnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCd9IH0pOwogICAgICAgICAgICBpbnN0YW5jZS5wb3N0KCdodHRwOi8vbG9jYWxob3N0OjgwODAvY3VycmVudENvdW50cnlDb25maXJtZWRBcGknCiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWYKICAgICAgICAgICAgKS50aGVuKHJlc3BvbnNlID0+IHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEpOwogICAgICAgICAgICAgICAgdmFyIGRhdGFrID0gcmVzcG9uc2UuZGF0YTsKICAgICAgICAgICAgICAgIHZhciBsZW4gPSByZXNwb25zZS5kYXRhLmxlbmd0aDsKICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZgogICAgICAgICAgICAgICAgdmFyIGxpc3RkYXRhPVtdOwogICAgICAgICAgLy8gICAgICBjb25zb2xlLmxvZyh0aGlzLmxpc3RkYXRhKTsKICAgICAgICAgICAgICAgIGZvcih2YXIgaT0wO2k8bGVuO2krKyl7CiAgICAgICAgICAgICAgICAgICAgdmFyIGluZm89e307CiAgICAgICAgICAgICAgICAgICAgaW5mby5uYW1lPWRhdGFrW2ldLm5hbWU7CiAgICAgICAgICAgICAgICAgICAgaW5mby52YWx1ZT1kYXRha1tpXS52YWx1ZTsKICAgICAgICAgICAgICAgICAgICBsaXN0ZGF0YS5wdXNoKGluZm8pOwkvL+aKimluZm/ph4zpnaLnmoTmlbDmja7ov73liqDliLBkYXRh6YeMCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhsaXN0ZGF0YSk7CiAgICAgICAgICAgICAgICBsZXQgbXlDaGFydCA9IGVjaGFydHMuaW5pdCh0aGlzLiRyZWZzLm15RWNoYXJ0LCdoYWxsb3dlZW4nKTsgLy/ov5nph4zmmK/kuLrkuobojrflvpflrrnlmajmiYDlnKjkvY3nva4KICAgICAgICAgICAgICAgIHdpbmRvdy5vbnJlc2l6ZSA9IG15Q2hhcnQucmVzaXplOwogICAgICAgICAgICAgICAgbXlDaGFydC5zZXRPcHRpb24oewogICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyMzMzMzMzMnLAogICAgICAgICAgICAgICAgICAgIHRpdGxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICfnlqvmg4Xmg4XlhrUnLAogICAgICAgICAgICAgICAgICAgICAgICB4OiAnY2VudGVyJwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcDogewogICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyOiAnaXRlbScsCiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dEZWxheTogMCwKICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiAwLjIsCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHBhcmFtcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gKHBhcmFtcy52YWx1ZSArICcnKS5zcGxpdCgnLicpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZVswXS5yZXBsYWNlKC8oXGR7MSwzfSkoPz0oPzpcZHszfSkrKD8hXGQpKS9nLCAnJDEsJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyYW1zLnNlcmllc05hbWUgKyAnPGJyLz4nICsgcGFyYW1zLm5hbWUgKyAnOiAnICsgdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHZpc3VhbE1hcDogewogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAncmlnaHQnLAogICAgICAgICAgICAgICAgICAgICAgICBtaW46IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIG1heDogMjAwMDAwLAogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBbJ0hpZ2gnLCAnTG93J10sICAgICAgICAgICAvLyDmlofmnKzvvIzpu5jorqTkuLrmlbDlgLzmlofmnKwKICAgICAgICAgICAgICAgICAgICAgICAgY2FsY3VsYWJsZTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHRvb2xib3g6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgLy9vcmllbnQ6ICd2ZXJ0aWNhbCcsCiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6ICdsZWZ0JywKICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAndG9wJywKICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZTogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVZpZXc6IHtyZWFkT25seTogZmFsc2V9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdG9yZToge30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlQXNJbWFnZToge30KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgc2VyaWVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICfnjrDlrZjnoa7or4rkurrmlbAnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ21hcCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2FtOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwOiAnd29ybGQnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1waGFzaXM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOaWh+acrOS9jee9ruS/ruatowogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dEZpeGVkOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWxhc2thOiBbMjAsIC0yMF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBsaXN0ZGF0YQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgIH0KfQo="},{"version":3,"sources":["ddemo.vue"],"names":[],"mappingsfile":"ddemo.vue","sourceRoot":"src/views","sourcesContent":["<template>\n\n    <div class=\"echarts\">\n        <div :style=\"{height:'400px',width:'600px'}\" ref=\"myEchart\"></div>\n    </div>\n</template>\n<script>\n    import echarts from \"echarts\";\n    // eslint-disable-next-line no-unused-vars\n    import axios from 'axios';\n    import '../../node_modules/echarts/map/js/world.js';\n    import halloween from '../assets/js/halloween';\n    //import '../../node_modules/echarts/map/js/china.js' // 引入中国地图数据\n    export default {\n        name: \"echarts\",\n        props: [\"userJson\"],\n        data() {\n            return {\n                chart: null,\n                listdata: []\n            };\n        },\n        mounted() {\n            this.chinaConfigure();\n        },\n        beforeDestroy() {\n            if (!this.chart) {\n                return;\n            }\n            this.chart.dispose();\n            this.chart = null;\n        },\n        methods: {\n            chinaConfigure() {\n                var instance = axios.create({ headers: {'content-type': 'application/x-www-form-urlencoded'} });\n                instance.post('http://localhost:8080/currentCountryConfirmedApi'\n                    // eslint-disable-next-line no-undef\n                ).then(response => {\n                    console.log(response.data);\n                    var datak = response.data;\n                    var len = response.data.length;\n                    // eslint-disable-next-line no-undef\n                    var listdata=[];\n              //      console.log(this.listdata);\n                    for(var i=0;i<len;i++){\n                        var info={};\n                        info.name=datak[i].name;\n                        info.value=datak[i].value;\n                        listdata.push(info);\t//把info里面的数据追加到data里\n                    }\n                    console.log(listdata);\n                    let myChart = echarts.init(this.$refs.myEchart,'halloween'); //这里是为了获得容器所在位置\n                    window.onresize = myChart.resize;\n                    myChart.setOption({\n                        backgroundColor: '#333333',\n                        title: {\n                            text: '疫情情况',\n                            x: 'center'\n                        },\n                        tooltip: {\n                            trigger: 'item',\n                            showDelay: 0,\n                            transitionDuration: 0.2,\n                            formatter: function (params) {\n                                var value = (params.value + '').split('.');\n                                value = value[0].replace(/(\\d{1,3})(?=(?:\\d{3})+(?!\\d))/g, '$1,');\n                                return params.seriesName + '<br/>' + params.name + ': ' + value;\n                            }\n                        },\n                        visualMap: {\n                            left: 'right',\n                            min: 0,\n                            max: 200000,\n                            text: ['High', 'Low'],           // 文本，默认为数值文本\n                            calculable: true,\n                        },\n                        toolbox: {\n                            show: true,\n                            //orient: 'vertical',\n                            left: 'left',\n                            top: 'top',\n                            feature: {\n                                dataView: {readOnly: false},\n                                restore: {},\n                                saveAsImage: {}\n                            }\n                        },\n                        series: [\n                            {\n                                name: '现存确诊人数',\n                                type: 'map',\n                                roam: true,\n                                map: 'world',\n                                emphasis: {\n                                    label: {\n                                        show: true\n                                    }\n                                },\n                                // 文本位置修正\n                                textFixed: {\n                                    Alaska: [20, -20]\n                                },\n                                data: listdata\n                            }\n                        ]\n                    });\n                });\n            }\n        }\n    }\n</script>\n"]}]}